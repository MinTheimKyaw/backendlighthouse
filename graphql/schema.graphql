"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
"This is data type graphql file call"
#import datatype.graphql 
#import reportlisttype.graphql 

type PageInfo {
  currentPage: Int
  lastPage: Int
  total:Int
}

type PostsPageInfo {
  data: [Post!]
  page: PageInfo
}


type SomeComplexQueryPageInfo {
  data: [SomeComplexList!]
  page: PageInfo
}

type Query {
    
    user(id: Int! @eq): User @find
    employees: [Employee] @guard
    employeeslist: [Employee!]! @paginate  @guard
    employee(id: ID @eq): Employee @find
    UsersList: [User!]! @paginate

    UserListQuery(start: Int =1,limit: Int=15): [User!]! 
    @field(resolver: "UserListQuery@paginate")


    
    post(id: Int! @eq): Post @find @guard

}

type Mutation {
    
  createEmployee(
  name: String @rules(apply: ["required"])
  position: String @rules(apply: ["required"])
  ): Employee @create @guard

  updateEmployee(
    id: ID @rules(apply: ["required"])
    name: String @rules(apply: ["required"])
    position: String @rules(apply: ["required"])
  ): Employee @update

  deleteEmployee(
    id: ID!
  ): Employee @delete

  createPost(
    title: String @rules(apply:["required"])
    content: String 
    user_id: Int!
  ): Post @create @guard
}

extend type Query @guard {
  posts: [Post] @all
  postlist(first: Int = 20,page: Int = 1,filtertitle: String= "",filtercontent: String= ""): PostsPageInfo @field(resolver: "PostQuery@showAll")
  SomeComplexQuery(first: Int = 20,page: Int = 1,Search: String=""):SomeComplexQueryPageInfo @field(resolver: "SomeComplexQuery@showAll")
}

